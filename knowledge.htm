<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Leitner QUIZ</title>

  <!-- External scripts -->
  <script src="./knowledgeBaseJAPANESE.js"></script>
  <script src="./Storage.js"></script>
  <script src="./Algorithm.js"></script>
  <script src="./AIPartner.js"></script>
  <script src="./QuestionMapper.js"></script>
  <script src="./ExportingUX.js"></script>
  <script src="./FeedbackQueue.js"></script>

  <!-- CSS Styles -->
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: "Segoe UI", Roboto, sans-serif;
      background: #f0f2f5;
      color: #333;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
    }

    header {
      background-color: #4A90E2;
      color: white;
      width: 100%;
      padding: 20px 40px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      position: relative;
    }

    header h1 {
      margin: 0;
      font-size: 2rem;
      flex: 1;
    }

    .header-buttons {
      display: flex;
      gap: 10px;
    }

    .header-buttons button {
      background: rgba(255, 255, 255, 0.15);
      color: #fff;
      border: 1px solid rgba(255, 255, 255, 0.3);
      padding: 8px 12px;
      font-size: 0.9rem;
      border-radius: 5px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.2s ease;
      display: flex;
      align-items: center;
      gap: 5px;
    }

    .header-buttons button:hover {
      background: rgba(255, 255, 255, 0.25);
      transform: translateY(-1px);
    }

    .container {
      background: white;
      margin-top: 30px;
      padding: 20px;
      width: 90%;
      max-width: 500px;
      border-radius: 10px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
      text-align: center;
      transition: all 0.3s ease;
    }

    p {
      margin: 20px 0;
      font-size: 1.2rem;
    }

    #question {
      font-size: 1.5rem;
      font-weight: bold;
      color: #333;
    }

    #answer {
      color: #4A90E2;
      font-size: 1rem;
      margin-top: 15px;
    }

    button {
      background-color: #4A90E2;
      color: white;
      border: none;
      padding: 12px 20px;
      margin: 10px 5px;
      border-radius: 5px;
      font-size: 1rem;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.2s ease;
    }

    button:hover {
      background-color: #357ABD;
      transform: translateY(-2px);
    }

    button:disabled {
      background-color: #cccccc;
      cursor: not-allowed;
    }

    .buttons-group {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 10px;
      margin-top: 20px;
    }

    .performance {
      text-align: left;
      margin-top: 20px;
      font-size: 0.9rem;
      color: #666;
    }

    .message {
      font-size: 0.9rem;
      color: #e74c3c;
      margin-top: 15px;
      display: none;
    }

    footer {
      margin-top: auto;
      padding: 20px 0;
      font-size: 0.8rem;
      color: #aaa;
    }

    .loader {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #4A90E2;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 20px auto;
      display: none;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    textarea {
      width: 90%;
      height: 120px;
      margin-top: 20px;
      font-family: monospace;
      padding: 10px;
    }
  </style>
</head>

<body>

  <header>
    <h1>Leitner quiz</h1>
    <div class="header-buttons">
      <button onclick="presenter.onClickOnExportData();">‚¨áÔ∏è Exporter</button>
      <button onclick="presenter.onClickOnImportData();">üìÇ Importer</button>
    </div>
  </header>

  <div class="container">
	<div class="loader" id="loader"></div>
    <div class="message" id="message"></div>
    <p id="question">Cliquez sur le bouton pour obtenir une question.</p>
	
    <p id="answer"></p>
	<p id="queueProgress" style="color:#666; font-size: 0.9rem; margin-top: 10px;"></p>

    <textarea id="tentativeAnswer" placeholder="Brouillon ici..."></textarea><br/>

    <button id="generateBtn" onclick="presenter.onClickOnGetQuestion();">üé≤ Nouvelle Question</button>
    <button id="showAnswer" onclick="presenter.onClickOnValidateAnswer();" style="display: none;">üëÄ Valider R√©ponse</button>

    <div class="performance" id="performance"></div>
<br><br>
    <div class="buttons-group">
      <button onclick="presenter.onClickOnShowPerformance();">üìä Voir Performances</button>
      <button onclick="presenter.onClickOnResetPerformanceData();">üîÑ R√©initialiser</button>
    </div>

    
  </div>

  <footer>
    &copy; 2025 Leitner-Based Quiz de CyrilleTelmer
  </footer>

  <script>
  const view = {
    questionEl: document.getElementById("question"),
    answerEl: document.getElementById("answer"),
    showAnswerBtn: document.getElementById("showAnswer"),
    loaderEl: document.getElementById("loader"),
    messageEl: document.getElementById("message"),
    performanceEl: document.getElementById("performance"),
    generateBtn: document.getElementById("generateBtn"),
    attemptedAnswerTxt: document.getElementById("tentativeAnswer"),
    progressEl: document.getElementById("queueProgress"),

    updateQuestion(text) {
      this.questionEl.innerText = text;
    },

    clearAnswerBox() {
      this.attemptedAnswerTxt.value = "";
    },

    showLoader(isVisible) {
      this.loaderEl.style.display = isVisible ? "block" : "none";
    },

    enableGenerateButton(enable) {
      this.generateBtn.disabled = !enable;
    },

    toggleShowAnswerBtn(show) {
      this.showAnswerBtn.style.display = show ? "inline-block" : "none";
    },

    displayMessage(text) {
      this.messageEl.innerText = text;
      this.messageEl.style.display = "block";
      setTimeout(() => {
        this.messageEl.style.display = "none";
      }, 4000);
    },

    updateProgress(current, total) {
      this.progressEl.innerText = `${current} / ${total} r√©ponses enregistr√©es...`;
      if (current === total) {
        this.progressEl.innerText += " üì¶ Pr√™t pour correction !";
      }
    },

    showPerformanceReport(reportHTML) {
      this.performanceEl.innerHTML = reportHTML;
    },

    clearPerformance() {
      this.performanceEl.innerHTML = '';
    }
  };

  const presenter = {
    currentTopic: "",
    currentAnswer: "",
    topicProvider: new TopicProvider(),
    promptIssuer: new PromptIssuer(),
    storage: null,
    algorithm: null,
    aiPartner: new AIPartner(),
    questionMapper: null,
    exportingUX: null,
    feedbackQueue: new FeedbackQueue(2),

    init() {
	  this.storage = new KnowledgeStorage(this.topicProvider.topics(), this.topicProvider.knowledgeId());
	  this.questionMapper=new QuestionMapper(this.promptIssuer.responseRegex());
      this.algorithm = new LeitnerAlgorithm(this.storage);
      this.exportingUX = new ExportingUX(this.storage);
      this.exportingUX.setOnImportSuccessCallback(() => this.onClickOnShowPerformance());
    },
	
	onClickOnImportData(){
		this.exportingUX.importData();
	},
	
	onClickOnExportData(){
		this.exportingUX.exportData();
	},

    async onClickOnGetQuestion() {
      view.displayMessage("");
      view.showLoader(true);
      view.enableGenerateButton(false);

      this.currentTopic = this.algorithm.getTopicToStudy();
      const prompt = this.promptIssuer.constructPrompt(this.currentTopic);

      try {
        const rawDataFromAI = await this.aiPartner.getQuestion(prompt);
        const resulting = this.questionMapper.map(rawDataFromAI);

        view.updateQuestion(resulting.question);
        this.currentAnswer = resulting.answer;

        view.toggleShowAnswerBtn(true);
        view.clearAnswerBox();
      } catch (err) {
        console.error("Erreur API :", err);
        view.updateQuestion("Erreur lors de la g√©n√©ration de la question.");
        view.displayMessage("Impossible de g√©n√©rer la question.");
      }

      view.showLoader(false);
      view.enableGenerateButton(true);
    },

    onClickOnValidateAnswer() {
      const userAnswer = view.attemptedAnswerTxt.value;
      this.feedbackQueue.addItem({
        question: view.questionEl.innerText,
        correctAnswer: this.currentAnswer,
        userAnswer,
        topic: this.currentTopic
      });

      view.clearAnswerBox();
      view.toggleShowAnswerBtn(false);
      view.updateProgress(this.feedbackQueue.queue.length, this.feedbackQueue.maxSize);

      if (this.feedbackQueue.isFull()) {
        this.displayFeedbackQueue();
      } else {
        view.displayMessage("R√©ponse enregistr√©e ! Attendez que la file se remplisse.");
      }
    },

    displayFeedbackQueue() {
      let html = "<h3>Correction diff√©r√©e</h3><ul>";
      this.feedbackQueue.getItems().forEach((item, i) => {
        html += `
          <li>
            <strong>Q${i + 1}:</strong> ${item.question}<br/>
            <em>Votre r√©ponse:</em> ${item.userAnswer || "<i>Aucune</i>"}<br/>
            <em>IA r√©ponse:</em> ${item.correctAnswer}<br/>
            <div id="confirmationFeedbackPanel${i}">
              <button onclick="presenter.onClickOnRecordResult('${item.topic}', true, ${i})">‚úÖ Bonne R√©ponse?</button>
              <button onclick="presenter.onClickOnRecordResult('${item.topic}', false, ${i})">‚ùå Mauvaise R√©ponse?</button>
            </div>
            <hr/>
          </li>`;
      });
      html += `<button onclick="presenter.onClickOnConfirmFeedback()">aight.</button></ul>`;
      view.showPerformanceReport(html);
      this.feedbackQueue.clear();
      view.displayMessage("R√©ponses corrig√©es !");
    },

    onClickOnConfirmFeedback() {
      view.clearPerformance();
    },

    onClickOnRecordResult(topic, isCorrect, position) {
      this.storage.saveData(topic, isCorrect);
      const panel = document.getElementById("confirmationFeedbackPanel" + position);
      if (panel) panel.style.display = "none";
      view.displayMessage("Votre r√©ponse a √©t√© enregistr√©e !");
    },

    onClickOnShowPerformance() {
      const data = this.storage.getData();
      let html = "<h3>Performances</h3><ul>";
      Object.entries(data).forEach(([topic, stats]) => {
        const total = stats.correct + stats.incorrect;
        const pct = total === 0 ? 0 : ((stats.correct / total) * 100).toFixed(1);
        html += `<li><strong>${topic}</strong>: ${stats.correct} / ${total} (${pct}%)</li>`;
      });
      html += "</ul>";
      view.showPerformanceReport(html);
    },

    onClickOnResetPerformanceData() {
      this.storage.resetPerformanceData();
      view.clearPerformance();
      view.displayMessage("Donn√©es de performance r√©initialis√©es.");
    }
  };

  // Init on load
  presenter.init();
</script>

</body>
</html>
